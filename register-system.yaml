- name: "Gather required information"
  hosts: all
  tasks:

    - name: "Install dmidecode and ipmitool"
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: true
      vars:
        packages:
          - dmidecode
          - ipmitool

    - name: "Get manufacturer"
      command: dmidecode --string system-manufacturer
      register: manufacturer

    - name: "Get Serial Number"
      command: dmidecode --string system-serial-number
      register: serial

    - name: "Get product type"
      command: dmidecode --string system-product-name
      register: product

    - name: "Get system UUID"
      command: dmidecode --string system-uuid
      register: uuid

    - name: "Get chassis height"
      shell: dmidecode --type chassis |grep Height | cut -d ' ' -f 2
      register: chassis_height

    - name: "Get IPMI Interface's mac address"
      shell: ipmitool lan print |grep "MAC Address" | awk '{print $4}'
      register: ipmi_mac_addr

    - name: "Get IPMI address"
      shell: ipmitool lan print |grep "IP Address" | grep -v Source | cut -d ':' -f 2
      register: ipmi_addr

    - name: "Calcuate rack and rackpos"
      set_fact:
        rack: "{{ parsed_address[-2] }}"
        rackpos: "{{ parsed_address[-1] }}"
      vars:
        parsed_address: "{{ ipmi_addr.stdout | split('.') }}"

    - name: "Create the manufacturer"
      ignore_errors: True
      netbox.netbox.netbox_manufacturer:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ manufacturer.stdout }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Create the device_type"
      ignore_errors: True
      netbox.netbox.netbox_device_type:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          manufacturer: "{{ manufacturer.stdout }}"
          model: "{{ product.stdout }}"
          u_height: "{{ chassis_height.stdout }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Create device role based on ansible group"
      netbox.netbox.netbox_device_role:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ group_names[0] }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Register the system in netbox"
      ignore_errors: True
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          # https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#defining-different-values-for-true-false-null-ternary
          name: "{{ inventory_hostname }} "
          serial: "{{ (serial.stdout == '.....') | ternary(uuid.stdout, serial.stdout) }}"
          device_type: "{{ product.stdout }}"
          rack: "{{ 'NEU Cage ' + rack }}"
          position: "{{rackpos}}"
          device_role: "{{ group_names[0] }}"
          face: front
          location: Row 3 Pod B
          site: MGHPCC
        state: present
      delegate_to: 127.0.0.1

    - name: "Create IPMI interface for registered device"
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          device: "{{ inventory_hostname }}"
          name: IPMI Interface
          mac_address: "{{ ipmi_mac_addr.stdout }}"
          type: 1000Base-t (1GE)
          mgmt_only: true
        state: present
      delegate_to: 127.0.0.1

    - name: "Associate IPMI address with IPMI interface"
      netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ ipmi_addr.stdout }}"
          assigned_object:
            name: IPMI Interface
            device: "{{ inventory_hostname }}"
        state: present
      delegate_to: 127.0.0.1
