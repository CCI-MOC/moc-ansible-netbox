- name: "Register system into netbox"
  hosts: servers
  tasks:

    - name: "Install dmidecode and ipmitool"
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: true
      vars:
        packages:
          - dmidecode
          - ipmitool
          - lldpad

    - name: "Start lldpad service"
      ansible.builtin.systemd:
        name: lldpad
        state: started
        enabled: true

    - name: "Get physical network interfaces"
      command: find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n'
      register: physical_interfaces

    - name: "Set interfaces to start collecting lldp information"
      command: lldptool -i {{ item }} set-lldp adminstatus=rx
      loop: "{{ physical_interfaces.stdout_lines }}"

    - name: "Get manufacturer"
      command: dmidecode --string system-manufacturer
      register: manufacturer

    - name: "Get Serial Number"
      command: dmidecode --string system-serial-number
      register: serial

    - name: "Get product type"
      command: dmidecode --string system-product-name
      register: product

    - name: "Get system UUID"
      command: dmidecode --string system-uuid
      register: uuid

    - name: "Get chassis height"
      shell: dmidecode --type chassis |grep Height | cut -d ' ' -f 2
      register: chassis_height
      when: height is not defined

    - name: "Set height"
      set_fact:
        height: "{{ chassis_height.stdout }}"
      when: height is not defined

    - name: "Get IPMI Interface's mac address"
      shell: ipmitool lan print |grep "MAC Address" | awk '{print $4}'
      register: ipmi_mac_addr

    - name: "Get IPMI address"
      shell: >-
        ipmitool lan print | awk -F' *: *' '$1 == "IP Address" {print $2}'
      register: ipmi_addr

    - name: "Cacluate and set rack, rack_number and rackpos"
      include_role:
        name: calcuate-rack-position
      vars:
        ipmi_ip: "{{ ipmi_addr.stdout }}"

    - name: "Create a dictionary mapping interface speeds and module name with netbox names"
      set_fact:
        speed_map: {
          '-1': '1000Base-t (1GE)',
          '1000': '1000Base-t (1GE)',
          '10000': '10GBase-t (10GE)'
        }
        module_map: {
          'ixgbe': '10GBase-t (10GE)',
          'tg3': '1000Base-t (1GE)',
          'sfc': '10GBase-t (10GE)'
        }

    - name: "Set prefixes"
      set_fact:
        prefixes: "{{ netbox_prefixes | map(attribute='prefix') | list }}"

    - name: "Create the manufacturer"
      ignore_errors: true
      netbox.netbox.netbox_manufacturer:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ manufacturer.stdout }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Create the device_type"
      ignore_errors: true
      netbox.netbox.netbox_device_type:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          manufacturer: "{{ manufacturer.stdout }}"
          model: "{{ product.stdout }}"
          u_height: "{{ height }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Create device role based on ansible group"
      netbox.netbox.netbox_device_role:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ group_names[0] }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Register the system in netbox"
      ignore_errors: true
      netbox.netbox.netbox_device:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          # https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#defining-different-values-for-true-false-null-ternary
          name: "{{ inventory_hostname }} "
          serial: "{{ ('....' in serial.stdout) | ternary(uuid.stdout, serial.stdout) }}"
          device_type: "{{ product.stdout }}"
          rack: "{{ rack }}"
          position: "{{rackpos}}"
          device_role: "{{ group_names[0] }}"
          face: front
          location: "{{ location }}"
          site: MGHPCC
        state: present
      delegate_to: 127.0.0.1

    - name: "Create IPMI interface for registered device"
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          device: "{{ inventory_hostname }}"
          name: IPMI Interface
          mac_address: "{{ ipmi_mac_addr.stdout }}"
          type: 1000Base-t (1GE)
          mgmt_only: true
        state: present
      delegate_to: 127.0.0.1

    - name: "Associate IPMI address with IPMI interface"
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ ipmi_addr.stdout }}"
          assigned_object:
            name: IPMI Interface
            device: "{{ inventory_hostname }}"
        state: present
      delegate_to: 127.0.0.1

    - name: "Create physical network interfaces"
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          device: "{{ inventory_hostname }}"
          name: "{{ item }}"
          mac_address: "{{ interface.macaddress|default('unknown') }}"
          type: >-
            {{ speed_map[interface.speed|string] if interface.speed is defined else module_map[interface.module] | default('Other') }}
        state: present
      vars:
        interface: >-
          {{ hostvars[inventory_hostname]["ansible_{}".format(item.replace('-', '_'))] }}
      delegate_to: 127.0.0.1
      loop: "{{ physical_interfaces.stdout_lines }}"

    - name: "Create virtual network interfaces that have an IP"
      netbox.netbox.netbox_device_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          device: "{{ inventory_hostname }}"
          name: "{{ item }}"
          mac_address: "{{ interface.macaddress|default('unknown') }}"
          type: virtual
        state: present
      vars:
        interface: >-
          {{ hostvars[inventory_hostname]["ansible_{}".format(item.replace('-', '_'))] }}
      delegate_to: 127.0.0.1
      loop: "{{ansible_interfaces | difference(physical_interfaces.stdout_lines)}}"
      when: interface.ipv4.address is defined and (prefixes | select('network_contains', interface.ipv4.address))

    - name: "Associate IP addresses with network interfaces"
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ interface.ipv4.address }}"
          assigned_object:
            name: "{{ item }}"
            device: "{{ inventory_hostname }}"
        state: present
      vars:
        interface: >-
          {{ hostvars[inventory_hostname]["ansible_{}".format(item.replace('-', '_'))] }}
      delegate_to: 127.0.0.1
      loop: "{{ ansible_interfaces }}"
      when: interface.ipv4.address is defined and (prefixes | select('network_contains', interface.ipv4.address))

    - name: "Pause for some time so that lldptool has enough time to capture necessary information"
      pause:
        minutes: 5

    - name: "Get switchport name that's connected to NIC"
      shell: >-
        lldptool -i {{ item }} get-tlv -n -V portID | awk -F": " '/Ifname|Local/ {print $2}'
      failed_when: false
      loop: "{{ physical_interfaces.stdout_lines }}"
      register: port_ids

    - name: "Get hostname of the switch that a NIC is connected to"
      shell: >-
        lldptool -i {{ item.item }} get-tlv -n -V sysName
      failed_when: false
      loop: "{{ port_ids.results }}"
      register: sysnames

    - name: "Create list containing NIC, switchport and switch hostname"
      set_fact:
        connections: "{{ connections + [[nic, switchport, switch]] }}"
      when: item.rc == 0
      loop: "{{ sysnames.results }}"
      vars:
        connections: []
        nic: "{{ item.item.item }}"
        # Cisco switchports are registersted like "Ethernet X/Y" but lldp data has it as Eth X/Y
        switchport: "{{item.item.stdout.replace('Eth', 'Ethernet') if 'Ethernet' not in item.item.stdout else item.item.stdout }}"
        switch: "{{item.stdout.split('\t')[1]}}"

    - name: "Create cables that connect NIC to switchports"
      netbox.netbox.netbox_cable:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          termination_a_type: dcim.interface
          termination_a:
            device: "{{ inventory_hostname }}"
            name: "{{ item[0] }}"
          termination_b_type: dcim.interface
          termination_b:
            device: "{{ item[2] }}"
            name: "{{ item[1] }}"
      delegate_to: 127.0.0.1
      loop: "{{ connections }}"

    - name: "Create cable for IPMI interface"
      netbox.netbox.netbox_cable:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          termination_a_type: dcim.interface
          termination_a:
            device: "{{ inventory_hostname }}"
            name: IPMI Interface
          termination_b_type: dcim.interface
          termination_b:
            device: ipmi-cage{{ rack_number }}
            name: GigabitEthernet 1/1/{{ rackpos }}
      delegate_to: 127.0.0.1
